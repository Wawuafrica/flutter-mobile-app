default_platform(:ios)

platform :ios do
  desc "Build and upload to TestFlight"
  lane :beta do
    setup_ci

    # Setup keychain for CI
    create_keychain(
      name: "signing_keychain",
      password: ENV['MATCH_KEYCHAIN_PASSWORD'],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )
    UI.message("Keychain 'signing_keychain' created and unlocked.")

    # Load App Store Connect API key from JSON file
    api_key = app_store_connect_api_key(
      key_filepath: './apikey.json'
    )

    # Get certificates and provisioning profiles with Match
    match(
      type: "appstore",
      keychain_name: "signing_keychain",
      keychain_password: ENV['MATCH_KEYCHAIN_PASSWORD'],
      readonly: true,
      app_identifier: "com.wawuafrica.wawu",
      git_url: ENV['MATCH_GIT_URL'],
      git_basic_authorization: Base64.strict_encode64("#{ENV['MATCH_GIT_TOKEN']}:x-oauth-basic"),
      storage_mode: "git",
      api_key: api_key,
      force_for_new_devices: true,
      clone_branch_directly: true
    )
    UI.message("Match completed. Certificates and profiles retrieved.")

    # Diagnostic: List identities after match
    UI.message("--- Listing identities in the keychain (post-match) ---")
    sh("security find-identity -p codesigning -v #{Actions.lane_context[SharedValues::KEYCHAIN_PATH]}")
    UI.message("--- End identities listing (post-match) ---")

    profile_name = Actions.lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]["com.wawuafrica.wawu"]
    UI.message("Using profile: #{profile_name}")

    # Update project team
    update_project_team(
      path: "Runner.xcodeproj",
      teamid: ENV['APPLE_TEAM_ID']
    )

    # Build Flutter app
    Dir.chdir("..") do
      sh("flutter", "build", "ios", "--release", "--no-codesign")
    end
    UI.message("Flutter build completed.")

    # Update code signing settings
    require 'xcodeproj'
    project = Xcodeproj::Project.open("../Runner.xcodeproj")

    project.targets.each do |target|
      if target.name == "Runner"
        target.build_configurations.each do |config|
          if config.name == "Release"
            config.build_settings["CODE_SIGN_STYLE"] = "Manual"
            config.build_settings["PROVISIONING_PROFILE_SPECIFIER"] = profile_name
            config.build_settings["DEVELOPMENT_TEAM"] = ENV['APPLE_TEAM_ID']
            config.build_settings["CODE_SIGN_IDENTITY[sdk=iphoneos*]"] = "iPhone Distribution"
          end
        end
      end
    end

    project.save
    UI.message("Updated code signing settings.")

    # Build and sign the app
    build_app(
      workspace: "Runner.xcworkspace",
      scheme: "Runner",
      configuration: "Release",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          "com.wawuafrica.wawu" => profile_name
        },
        signingStyle: "manual",
        teamID: ENV['APPLE_TEAM_ID'],
        signingCertificate: "iPhone Distribution",
        uploadBitcode: false,
        uploadSymbols: true,
        compileBitcode: false
      },
      clean: true,
      verbose: true,
      xcargs: "-allowProvisioningUpdates",
      output_directory: "./build/ios/ipa/",
      silent: false
    )
    UI.message("iOS app built and signed.")

    # Upload to TestFlight
    upload_to_testflight(
      api_key: api_key,
      skip_waiting_for_build_processing: false,
      skip_submission: false,
      distribute_external: false,
      notify_external_testers: false,
      changelog: "Automated build from GitHub Actions"
    )
    UI.message("Uploaded to TestFlight.")

    # Clean up keychain
    delete_keychain(name: "signing_keychain")
    UI.message("Keychain deleted.")
  end

  error do |lane, exception|
    delete_keychain(name: "signing_keychain") if File.exist?(File.expand_path("~/Library/Keychains/signing_keychain-db"))
  end
end