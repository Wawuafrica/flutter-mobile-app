default_platform(:ios)

platform :ios do
  desc "Build and upload to TestFlight"
  lane :beta do
    setup_ci

    # Setup keychain for CI
    create_keychain(
      name: "signing_keychain",
      password: "0810534",
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )

    # Load App Store Connect API key
    api_key = app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
      key_filepath: './AuthKey.p8'
    )

    match(
      type: "appstore",
      keychain_name: "signing_keychain",
      keychain_password: "0810534",
      readonly: true,
      app_identifier: "com.wawuafrica.wawu",
      git_url: ENV['MATCH_GIT_URL'],
      git_basic_authorization: Base64.strict_encode64("#{ENV['MATCH_GIT_TOKEN']}:x-oauth-basic"),
      storage_mode: "git",
      api_key: api_key,
      force_for_new_devices: true,
      clone_branch_directly: true
    )

    UI.message("Available provisioning profiles:")
    UI.message(Actions.lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING])
    profile_name = Actions.lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]["com.wawuafrica.wawu"]
    UI.message("Using profile: #{profile_name}")

    # --- FIX STARTS HERE ---
    # The `update_project_team` action often expects paths relative to the project root or the current Fastlane execution context.
    # If your GitHub Actions workflow runs `fastlane ios beta` from the `ios/` directory,
    # then the path to Runner.xcodeproj is simply "Runner.xcodeproj".
    # If the workflow runs `fastlane ios beta` from the root of your repository (`wawu-mobile/`),
    # then the path would be "ios/Runner.xcodeproj".

    # Let's assume the Fastlane command is run from the `ios/` directory in your GitHub Actions workflow.
    update_project_team(
      path: "Runner.xcodeproj", # Changed from "../Runner.xcodeproj"
      teamid: ENV['APPLE_TEAM_ID']
    )
    # --- FIX ENDS HERE ---

    # Build the Flutter app - This Dir.chdir block changes the working directory temporarily
    Dir.chdir("..") do
      sh("flutter", "build", "ios", "--release", "--no-codesign")
    end
    # After Dir.chdir block, the working directory reverts to ios/fastlane/

    # Manually update only Runner target settings to avoid Pod conflicts
    require 'xcodeproj'
    # For Xcodeproj::Project.open, the path is relative to the current Ruby process's working directory.
    # Since the Dir.chdir block is finished, we are back in ios/fastlane/.
    # So "../Runner.xcodeproj" is correct here.
    project = Xcodeproj::Project.open("../Runner.xcodeproj")

    project.targets.each do |target|
      if target.name == "Runner"
        target.build_configurations.each do |config|
          if config.name == "Release"
            config.build_settings["CODE_SIGN_STYLE"] = "Manual"
            config.build_settings["PROVISIONING_PROFILE_SPECIFIER"] = profile_name
            config.build_settings["DEVELOPMENT_TEAM"] = ENV['APPLE_TEAM_ID']
            config.build_settings["CODE_SIGN_IDENTITY[sdk=iphoneos*]"] = "iPhone Distribution"
          end
        end
      end
    end

    project.save
    UI.message("Updated Runner target code signing settings, leaving Pods untouched")

    build_app(
      workspace: "Runner.xcworkspace",
      scheme: "Runner",
      configuration: "Release",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          "com.wawuafrica.wawu" => profile_name
        },
        signingStyle: "manual",
        teamID: ENV['APPLE_TEAM_ID'],
        signingCertificate: "iPhone Distribution",
        uploadBitcode: false,
        uploadSymbols: true,
        compileBitcode: false
      },
      xcargs: "-allowProvisioningUpdates",
      output_directory: "./build/ios/ipa/",
      silent: true
    )

    upload_to_testflight(
      api_key: api_key,
      skip_waiting_for_build_processing: false,
      skip_submission: false,
      distribute_external: false,
      notify_external_testers: false,
      changelog: "Automated build from GitHub Actions"
    )

    delete_keychain(name: "signing_keychain")
  end

  desc "Deploy to App Store"
  lane :release do
    setup_ci

    # Setup keychain for CI
    create_keychain(
      name: "signing_keychain",
      password: "temp_password",
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )

    # Load App Store Connect API key
    api_key = app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
      key_filepath: './AuthKey.p8'
    )

    # Get certificates and provisioning profiles with Match
    match(
      type: "appstore",
      keychain_name: "signing_keychain",
      keychain_password: "temp_password",
      readonly: true,
      app_identifier: "com.wawuafrica.wawu",
      git_url: ENV['MATCH_GIT_URL'],
      git_basic_authorization: Base64.strict_encode64("#{ENV['MATCH_GIT_TOKEN']}:x-oauth-basic"),
      storage_mode: "git",
      api_key: api_key
    )

    # Upload metadata, screenshots, etc.
    deliver(
      api_key: api_key,
      submit_for_review: true,
      automatic_release: true,
      force: true,
      skip_metadata: true,
      skip_screenshots: true,
      skip_binary_upload: true
    )

    # Clean up
    delete_keychain(name: "signing_keychain")
  end

  error do |lane, exception|
    # Clean up keychain if there's an error
    delete_keychain(name: "signing_keychain") if File.exist?(File.expand_path("~/Library/Keychains/signing_keychain-db"))
  end
end