name: iOS Build and Deploy

on:
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: macos-latest # Or self-hosted runner if preferred

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        cache: true

    - name: Create .env file
      run: |
        echo "PUSHER_APP_KEY=${{ secrets.PUSHER_APP_KEY }}" > .env
        echo "PUSHER_CLUSTER=${{ secrets.PUSHER_CLUSTER }}" >> .env

    - name: Install dependencies
      run: flutter pub get

    # - name: Run tests
    #   run: flutter test

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.1' # Ensure this matches the version in your Fastfile or desired version

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true # This will run bundle install and cache gems

    - name: Install Fastlane
      run: gem install fastlane # Or bundle install if you have a Gemfile for Fastlane

    - name: Setup Git credentials for Match
      run: |
        git config --global user.email "ci@github.com"
        git config --global user.name "GitHub Actions"

    # Fix iOS deployment target and CocoaPods
    - name: Fix iOS deployment target and CocoaPods
      run: |
        # Create a proper Podfile with post_install script
        cat > ios/Podfile << 'EOF'
        # Minimum iOS deployment target
        platform :ios, '13.0'

        # CocoaPods analytics sends network stats synchronously affecting flutter build latency.
        ENV['COCOAPODS_DISABLE_STATS'] = 'true'

        project 'Runner', {
          'Debug' => :debug,
          'Profile' => :release,
          'Release' => :release,
        }

        def flutter_root
          generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
          unless File.exist?(generated_xcode_build_settings_path)
            raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
          end

          File.foreach(generated_xcode_build_settings_path) do |line|
            matches = line.match(/FLUTTER_ROOT\=(.*)/)
            return matches[1].strip if matches
          end
          raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
        end

        require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

        flutter_ios_podfile_setup

        target 'Runner' do
          use_frameworks!
          use_modular_headers!

          flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
        end

        post_install do |installer|
          installer.pods_project.targets.each do |target|
            flutter_additional_ios_build_settings(target)

            # Fix deployment target for all pods to minimum 13.0
            target.build_configurations.each do |config|
              config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
            end
          end
        end
        EOF

        # Update Flutter framework info
        /usr/libexec/PlistBuddy -c "Set :MinimumOSVersion 13.0" ios/Flutter/AppFrameworkInfo.plist || true

        # Update Runner Info.plist
        /usr/libexec/PlistBuddy -c "Set :MinimumOSVersion 13.0" ios/Runner/Info.plist || true

    # Set basic Xcode project configuration
    - name: Set Xcode project team
      run: |
        cd ios
        # This will be handled by fastlane's update_project_team action
        echo "Team ID will be set by fastlane: ${{ secrets.APPLE_TEAM_ID }}"

    # Create Fastfile in the ios directory
    - name: Create Fastfile
      run: |
        mkdir -p ios/fastlane
        # The Fastfile content will be created here or should already exist in your repo

    - name: Deploy to TestFlight
      env:
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }} # This is for decrypting .p12 from match repo
        MATCH_GIT_TOKEN: ${{ secrets.MATCH_GIT_TOKEN }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        FASTLANE_SKIP_UPDATE_CHECK: true
        FASTLANE_HIDE_GITHUB_ISSUES: true
        FASTLANE_DISABLE_ANIMATION: true
        MATCH_KEYCHAIN_NAME: signing_keychain
        # Ensure this password matches the one in Fastfile's create_keychain action
        MATCH_KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_UNLOCK_PASSWORD }} # This is for unlocking the *created keychain*
        FL_UNLOCK_KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_UNLOCK_PASSWORD }} # General Fastlane keychain unlock env
        MATCH_TYPE: appstore
        MATCH_READONLY: true
        MATCH_STORAGE_MODE: git
        MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_TOKEN }}
        MATCH_SKIP_CONFIRMATION: true
        MATCH_VERBOSE: true
      run: |
        cd ios
        echo "$APP_STORE_CONNECT_API_KEY" | base64 --decode > AuthKey.p8

        # --- DIAGNOSTIC COMMANDS START ---
        echo "--- Keychain Diagnostics Pre-Fastlane ---"
        echo "Listing Keychains on the system:"
        security list-keychains
        echo "Listing default keychain:"
        security list-keychains -d user
        echo "Attempting to list identities in the expected keychain path:"
        # Replace the literal path with the expected path for the runner.
        # GitHub Actions macos runners typically use /Users/runner/Library/Keychains/
        security find-identity -p codesigning -v "${HOME}/Library/Keychains/signing_keychain-db" || echo "signing_keychain-db not found or no identities (expected for now)."
        security find-identity -p codesigning -v "${HOME}/Library/Keychains/signing_keychain" || echo "signing_keychain not found or no identities (older path format - expected for now)."
        echo "--- End Keychain Diagnostics Pre-Fastlane ---"

        # Check if Fastfile exists
        echo "--- Checking Fastfile structure ---"
        if [ -f "fastlane/Fastfile" ]; then
          echo "Fastfile found in ios/fastlane/"
          echo "Available lanes:"
          fastlane lanes
        else
          echo "Fastfile not found in ios/fastlane/"
          echo "Current directory contents:"
          ls -la
          echo "Fastlane directory contents:"
          ls -la fastlane/ || echo "No fastlane directory found"
          exit 1
        fi

        # Execute Fastlane with explicit platform
        fastlane ios beta
        fastlane ios release

    # - name: Upload IPA artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: ios-app
    #     path: ios/build/ios/ipa/*.ipa
    #     retention-days: 30
    #   if: always()

    - name: Clean up
      if: always()
      run: |
        rm -f ios/AuthKey.p8
        # Clean up any remaining keychains
        security delete-keychain signing_keychain || true