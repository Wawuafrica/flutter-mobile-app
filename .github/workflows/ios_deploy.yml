name: iOS Build and Deploy

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        cache: false

    - name: Create .env file
      run: |
        echo "PUSHER_APP_KEY=${{ secrets.PUSHER_APP_KEY }}" > .env
        echo "PUSHER_CLUSTER=${{ secrets.PUSHER_CLUSTER }}" >> .env

    # Clean and get fresh dependencies
    - name: Clean Flutter and install dependencies
      run: |
        flutter clean
        flutter pub get

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.1'

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: false

    - name: Install Fastlane
      run: gem install fastlane

    - name: Setup Git credentials for Match
      run: |
        git config --global user.email "ci@github.com"
        git config --global user.name "GitHub Actions"

    # Fix iOS deployment target and CocoaPods
    - name: Fix iOS deployment target and CocoaPods
      run: |
        # Clean iOS build artifacts first
        rm -rf ios/Pods
        rm -rf ios/Podfile.lock
        rm -rf ios/build
        
        # Create a proper Podfile with post_install script
        cat > ios/Podfile << 'EOF'
        # Minimum iOS deployment target
        platform :ios, '13.0'

        # CocoaPods analytics sends network stats synchronously affecting flutter build latency.
        ENV['COCOAPODS_DISABLE_STATS'] = 'true'

        project 'Runner', {
          'Debug' => :debug,
          'Profile' => :release,
          'Release' => :release,
        }

        def flutter_root
          generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
          unless File.exist?(generated_xcode_build_settings_path)
            raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
          end

          File.foreach(generated_xcode_build_settings_path) do |line|
            matches = line.match(/FLUTTER_ROOT\=(.*)/)
            return matches[1].strip if matches
          end
          raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
        end

        require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

        flutter_ios_podfile_setup

        target 'Runner' do
          use_frameworks!
          use_modular_headers!

          flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
        end

        post_install do |installer|
          installer.pods_project.targets.each do |target|
            flutter_additional_ios_build_settings(target)

            # Fix deployment target for all pods to minimum 13.0
            target.build_configurations.each do |config|
              config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
            end
          end
        end
        EOF

        # Update Flutter framework info
        /usr/libexec/PlistBuddy -c "Set :MinimumOSVersion 13.0" ios/Flutter/AppFrameworkInfo.plist || true

        # Update Runner Info.plist
        /usr/libexec/PlistBuddy -c "Set :MinimumOSVersion 13.0" ios/Runner/Info.plist || true

        # Install pods
        cd ios
        pod install

    - name: Deploy to TestFlight
      env:
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_TOKEN: ${{ secrets.MATCH_GIT_TOKEN }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        FASTLANE_SKIP_UPDATE_CHECK: true
        FASTLANE_HIDE_GITHUB_ISSUES: true
        FASTLANE_DISABLE_ANIMATION: true
        MATCH_KEYCHAIN_NAME: signing_keychain
        MATCH_KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_UNLOCK_PASSWORD }}
        FL_UNLOCK_KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_UNLOCK_PASSWORD }}
        MATCH_TYPE: appstore
        MATCH_READONLY: false
        MATCH_STORAGE_MODE: git
        MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_TOKEN }}
        MATCH_SKIP_CONFIRMATION: true
        MATCH_VERBOSE: true
        MATCH_FORCE_FOR_NEW_DEVICES: true
      run: |
        cd ios
        echo "$APP_STORE_CONNECT_API_KEY" | base64 --decode > AuthKey.p8

        # Clean any existing keychains
        security delete-keychain signing_keychain || true

        # Execute Fastlane
        fastlane ios beta

    - name: Clean up
      if: always()
      run: |
        rm -f ios/AuthKey.p8
        security delete-keychain signing_keychain || true